{"version":3,"sources":["assets/audio/bell-1.mp3","assets/audio/bell-2.mp3","assets/audio/bell-3.mp3","assets/audio/piano-1.mp3","assets/audio/piano-2.mp3","assets/audio/piano-3.mp3","assets/audio/piano-4.mp3","assets/audio/piano-5.mp3","assets/audio/soundF.flac","utilities/allSounds.js","components/Btns/Btns.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","allSounds","name","soundQ","key","soundW","soundE","soundA","soundS","soundD","soundZ","soundX","soundC","Btns","props","btnList","map","el","i","id","className","onClick","document","querySelector","play","setKeyPressHandler","src","Container","Fragment","errorMess","keyPress","App","useState","setKeyPress","setErrMess","pressBtnHandler","e","keyCode","toUpperCase","doc","setTimeout","useEffect","addEventListener","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d51a6600.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell-1.7658f906.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bell-2.27592ab5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bell-3.05cb6423.mp3\";","module.exports = __webpack_public_path__ + \"static/media/piano-1.faafa8b5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/piano-2.c2f1538a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/piano-3.11b3ac56.mp3\";","module.exports = __webpack_public_path__ + \"static/media/piano-4.241c9c88.mp3\";","module.exports = __webpack_public_path__ + \"static/media/piano-5.8f0e21a2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/soundF.e6239126.flac\";","import soundQ from '../assets/audio/bell-1.mp3';\nimport soundW from '../assets/audio/bell-2.mp3';\nimport soundE from '../assets/audio/bell-3.mp3';\nimport soundA from '../assets/audio/piano-1.mp3';\nimport soundS from '../assets/audio/piano-2.mp3';\nimport soundD from '../assets/audio/piano-3.mp3';\nimport soundZ from '../assets/audio/piano-4.mp3';\nimport soundX from '../assets/audio/piano-5.mp3';\nimport soundC from '../assets/audio/soundF.flac';\n\nexport const allSounds = [\n    { name: soundQ, key: 'Q' },\n    { name: soundW, key: 'W' },\n    { name: soundE, key: 'E' },\n    { name: soundA, key: 'A' },\n    { name: soundS, key: 'S' },\n    { name: soundD, key: 'D' },\n    { name: soundZ, key: 'Z' },\n    { name: soundX, key: 'X' },\n    { name: soundC, key: 'C' },\n]","import React from 'react';\n\nimport './Btns.css';\nimport { allSounds } from '../../utilities/allSounds';\n\nexport default function Btns(props) {\n\n    const btnList = allSounds.map((el, i) => {\n        return (\n            <span key={i} id={el.name} className='drum-pad' onClick={() => {\n                document.querySelector(`#${el.key}`).play();\n                props.setKeyPressHandler(el.key);\n            }}>{el.key}\n                <audio src={el.name} className='clip' id={el.key} />\n            </span>\n        );\n    });\n\n    return (\n        <div>\n            {btnList}\n        </div>\n    )\n}\n","import React from 'react';\n\nimport './Container.css';\nimport Btns from '../Btns/Btns';\n\n\nexport default function Container(props) {\n    return (\n        <React.Fragment>\n            <div id='drum-machine'>\n                {props.errorMess && <div className='error'>{props.errorMess}</div>}\n                {!props.errorMess && <div id='display'>{props.keyPress || ''}</div>}\n                <Btns setKeyPressHandler={props.setKeyPressHandler} />\n            </div>\n\n        </React.Fragment>\n    )\n}\n","import React, { useEffect, useState } from 'react';\n\nimport './App.css';\nimport Container from './components/Container/Container';\nimport { allSounds } from './utilities/allSounds';\n\nexport default function App() {\n  const [keyPress, setKeyPress] = useState('');\n  const [errorMess, setErrMess] = useState('');\n\n  const setKeyPressHandler = (value) => {\n    setKeyPress(value)\n  }\n\n  const pressBtnHandler = (e) => {\n    const { keyCode, key } = e;\n    setKeyPress(key.toUpperCase());\n    const doc = (src) => document.querySelector(`#${src}`).play();\n\n    switch (keyCode) {\n      case 81:\n        doc(allSounds[0].key);\n        break;\n      case 87:\n        doc(allSounds[1].key);\n        break;\n      case 69:\n        doc(allSounds[2].key);\n        break;\n      case 65:\n        doc(allSounds[3].key);\n        break;\n      case 83:\n        doc(allSounds[4].key);\n        break;\n      case 68:\n        doc(allSounds[5].key);\n        break;\n      case 90:\n        doc(allSounds[6].key);\n        break;\n      case 88:\n        doc(allSounds[7].key);\n        break;\n      case 67:\n        doc(allSounds[8].key);\n        break;\n      default:\n        setErrMess(`${key.toUpperCase()} is not supported`);\n        setTimeout(() => {\n          setErrMess('');\n        }, 2500);\n        return;\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', pressBtnHandler);\n  })\n\n  return (\n    <div className=\"App\">\n      <Container keyPress={keyPress} setKeyPressHandler={setKeyPressHandler}\n        errorMess={errorMess} />\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}